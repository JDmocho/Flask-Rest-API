{
	"info": {
		"_postman_id": "cc806a2f-bd23-4901-b4a3-ad9824c50f68",
		"name": "Book Liblary API",
		"description": "Backend API for managing authors, book, users and authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authors",
			"item": [
				{
					"name": "Get All Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Get All Authors\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.number_of_records).to.eql(5);",
									"  pm.expect(responseJson.pagination.total_pages).to.eql(2);",
									"  pm.expect(responseJson.pagination.total_records).to.eql(10);",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/authors/11",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors",
								"11"
							],
							"query": [
								{
									"key": "fields",
									"value": "first_name",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "-id",
									"disabled": true
								},
								{
									"key": "birth_date[gte]",
									"value": "24-12-1960",
									"disabled": true
								},
								{
									"key": "first_name",
									"value": "Andrzej",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								}
							]
						},
						"description": "Get all authors from the database"
					},
					"response": []
				},
				{
					"name": "Create New Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Create New Author\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.birth_date).to.eql(pm.variables.get(\"birth_date_create\"));",
									"  pm.expect(responseJson.data.first_name).to.eql(pm.variables.get(\"first_name_create\"));",
									"  pm.expect(responseJson.data.last_name).to.eql(pm.variables.get(\"last_name_create\"));",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\":\"{{first_name_create}}\",\n    \"last_name\":\"{{last_name_create}}\",\n    \"birth_date\":\"{{birth_date_create}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/authors",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors"
							]
						},
						"description": "Add new author to the database"
					},
					"response": []
				},
				{
					"name": "Get Single Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Get Single Author\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.birth_date).to.eql(\"25-06-1903\");",
									"  pm.expect(responseJson.data.first_name).to.eql(\"George\");",
									"  pm.expect(responseJson.data.last_name).to.eql(\"Orwell\");",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/authors/11",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors",
								"11"
							]
						},
						"description": "Get single author from the database"
					},
					"response": []
				},
				{
					"name": "Update Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Update Author\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.first_name).to.eql(pm.variables.get(\"first_name_update\"));",
									"  pm.expect(responseJson.data.last_name).to.eql(pm.variables.get(\"last_name_update\"));",
									"  pm.expect(responseJson.data.birth_date).to.eql(pm.variables.get(\"birth_date_update\"));",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{first_name_update}}\",\n    \"last_name\":\"{{last_name_update}}\",\n    \"birth_date\":\"{{birth_date_update}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/authors/11",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors",
								"11"
							]
						},
						"description": "Update author in the database"
					},
					"response": []
				},
				{
					"name": "Delete Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Delete Author\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/authors/11",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors",
								"11"
							]
						},
						"description": "Delete author from the database"
					},
					"response": []
				}
			],
			"description": "Authors resource managment"
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Get Single Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Get Single Book\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.author.first_name).to.eql(\"Kurt\");",
									"  pm.expect(responseJson.data.author.last_name).to.eql(\"Dahl\");",
									"  pm.expect(responseJson.data.title).to.eql(\"Timequake\");",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/books/5",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"5"
							]
						},
						"description": "Get single book from the database"
					},
					"response": []
				},
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Get All Book\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.number_of_records).to.eql(5);",
									"  pm.expect(responseJson.pagination.total_pages).to.eql(3);",
									"  pm.expect(responseJson.pagination.total_records).to.eql(14);",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/books",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "fields",
									"value": "id,title,number_of_pages",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "number_of_pages",
									"disabled": true
								},
								{
									"key": "number_of_pages[gte]",
									"value": "400",
									"disabled": true
								}
							]
						},
						"description": "Get all books from database"
					},
					"response": []
				},
				{
					"name": "Update Single Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Update Single Book\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.author.first_name).to.eql(\"Stephan\");",
									"  pm.expect(responseJson.data.author.last_name).to.eql(\"King\");",
									"  pm.expect(responseJson.data.description).to.eql(pm.variables.get(\"update_single_book_description\"));",
									"  pm.expect(responseJson.data.title).to.eql(pm.variables.get(\"update_single_book_title\"));",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{update_single_book_title}}\",\n    \"isbn\": {{update_single_book_isbn}},\n    \"number_of_pages\": {{update_single_book_number_of_page}},\n    \"description\": \"{{update_single_book_description}}\",\n    \"author_id\": {{update_single_book_author_id}}\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/books/5",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"5"
							]
						},
						"description": "Update single book in the database"
					},
					"response": []
				},
				{
					"name": "Delete Single Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Delete Book\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data).to.eql(\"Book with id 6 has been deleted\");",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/books/5",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"5"
							]
						},
						"description": "Delete single book from the database"
					},
					"response": []
				},
				{
					"name": "Get All Authors Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Get All Authors Books\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.number_of_records).to.eql(1);",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/authors/2/books",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors",
								"2",
								"books"
							]
						},
						"description": "Get all authors books from database"
					},
					"response": []
				},
				{
					"name": "Create New Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Create New Book\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.description).to.eql(pm.variables.get(\"create_new_book_description\"));",
									"  pm.expect(responseJson.data.isbn).to.eql(pm.variables.get(\"create_new_book_isbn\"));",
									"  pm.expect(responseJson.data.title).to.eql(pm.variables.get(\"create_new_book_title\"));",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{create_new_book_title}}\",\n    \"number_of_pages\": {{create_new_book_number_of_pages}},\n    \"isbn\": {{create_new_book_isbn}},\n    \"description\": \"{{create_new_book_description}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/authors/2/books",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"authors",
								"2",
								"books"
							]
						},
						"description": "Add a book to the database"
					},
					"response": []
				}
			],
			"description": "Book resource management",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"TOKEN\",data.token)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Login User\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test\",\n    \"password\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						},
						"description": "Login to the user"
					},
					"response": []
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Login User\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test987\",\n    \"password\": \"123456\",\n    \"email\": \"test987@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						},
						"description": "add user to the database"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Login User\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2MDgzOTQzMDh9.8ZaIIm1pPG-EOfAu8o3GjBQBYGhYLAGA8BIlDzrXgN4",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/api/v1/auth/me",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						},
						"description": "Get current user details"
					},
					"response": []
				},
				{
					"name": "Update User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Login User\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2MDgzOTc0NzF9.L-XI0fEYWwEuJmD5sq0M_7qH8P8ase7th9tKgvMfDHE",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"123456\",\n    \"new_password\": \"qwerty\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/update/password",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"update",
								"password"
							]
						},
						"description": "Update user password"
					},
					"response": []
				},
				{
					"name": "Update User Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Login User\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2MDg0MDE1MjB9._hOCl9cQL2A51SKMuuE5JVt_0RLhnFO-1a8yYSJnUKM",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"joannka86123@gmail.com\",\n    \"username\": \"test123\"\n}"
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/update/data",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"update",
								"data"
							]
						},
						"description": "Update username and email"
					},
					"response": []
				}
			]
		}
	]
}